# Multi-stage build for production optimization
FROM node:25-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies (including dev dependencies for build)
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM node:25-alpine AS production

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
  adduser -S harmonic -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder --chown=harmonic:nodejs /app/dist ./dist
COPY --from=builder --chown=harmonic:nodejs /app/public ./public

# Copy necessary configuration files
COPY --chown=harmonic:nodejs ./config ./config

# Create necessary directories
RUN mkdir -p /app/logs && chown harmonic:nodejs /app/logs

# Security hardening
RUN apk add --no-cache dumb-init && \
  rm -rf /var/cache/apk/*

# Switch to non-root user
USER harmonic

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node healthcheck.js

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/server.js"]
